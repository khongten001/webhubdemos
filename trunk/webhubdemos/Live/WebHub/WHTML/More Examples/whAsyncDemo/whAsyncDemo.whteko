<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE whteko PUBLIC "http://static.webhub.com/dtd/0214/whteko.dtd">
<whteko defaultlingvo="eng" designmode="code">

<whmacros>
mcImageDir=(~mcSiteRoot~)demos/whAsyncDemo/
mcGray1=#DDDDDD
mcLtGreen=#66FF66
mcLtBlue=#6666FF
mcLtRed=#FF6666
mcBar= |&nbsp;
</whmacros>

<whdroplet name="drDemoSpeedbarForhtasync">
<!-- (~TekeroID~) -->
[(~GO|pgSOver|Diagrams~)]<br />
[(~GO|Demo1Home|Demo/1~)]<br />
[(~GO|Demo2Home|Demo/2~)]
<!-- end speedbar -->
</whdroplet>

<whpage pageid="pgEnterHTASYNC" desc="Organization of WebHub async demo">
(~mcdoctypehtml~)
<html>
<head>
(~drHead~)
	<style>
	.highlighter {
		font-family: Verdana,Arial; 
		font-size: 11px; 
		background-color: yellow;
	}
	</style>
</head>
<body>
(~drPageBegin~)
<div id="whdemopagecontent">
This demo is arranged into sections.
<ol>
<li><span style="font-size: larger; font-weight:900;">Explanatory text and diagrams</span>
<ul>
<li style="list-style-type:square;"> (~JUMP|pgSOver|Sync Overview~): limitations of ordinary synchronous processing</li>
<li style="list-style-type:square;"> (~JUMP|pgAOver|Async Overview~): advantages to async processing of long tasks</li>
<li style="list-style-type:square;"> <a target="_blank" href="http://otl.17slon.com/tutorials.htm">Delphi OmniThreadLibrary Tutorials</a> </li>
</ul>
</li>

<li><span style="font-size:larger;font-weight:900;">Demonstration</span><br />
(~JUMP|Demo1Home|Demo 1~) simulates a database query response. Surfer controls duration, refresh speed and may cancel the request.
</li>

<li><span style="font-size:larger;font-weight:900;">Demonstration</span> <br />
(~JUMP|Demo2Home|Demo 2~) processes real tasks: ping, tracert and nslookup of the remote address of the surfer.</li>
</ol>
</div>  <!--- demopagecontent -->
(~drPageEnd~)

</body></html>
</whpage>

<whpage pageid="pgSOver" desc="Sync Overview">
(~mcdoctypehtml~)
<html>
<head>
(~drHead~)
</head>
<body>
(~drPageBegin~)
<div id="whdemopagecontent">
Normal WebHub traffic is <i>synchronous</i>, that is, each request must wait until the one
before it has finished.  The speed of the Hub and the EXE's serving the surfers ensure that
no one is kept waiting.  But what if the page being requested requires a database query (or
something else that might take a long time)? The EXE handling that surfer makes the query,
and then waits for the result, not able to handle any other requests, or even to finish building
the page for the waiting surfer, until the lengthy process has completed.  At best, the surfer
experiences sluggish performance, and at worst, the connection might time out before the
page is ever displayed. This is an inherent limitation of synchronous processing.<br />
<CENTER><h2>Synchronous Processing</h2>
<IMAGE SRC="(~mcImagedir~)normal_app.gif" HEIGHT=508 WIDTH=698 alt="synchronous schematic">
</CENTER>
<p>Next page: (~JUMP|pgAOver|Async Overview~)</p>
</div>  <!--- demopagecontent -->
(~drPageEnd~)

</body></html>
</whpage>

<whpage pageid="pgAOver" desc="Async Overview">
(~mcdoctypehtml~)
<html>
<head>
(~drHead~)
</head>
<body>
(~drPageBegin~)
<div id="whdemopagecontent">
An <i>asynchronous</i> WebHub application works a little differently.  When its main thread
receives a request  for a page that will require a long time to construct, it spawns a dedicated
worker thread to handle the long task, and then can return a page to the surfer informing him
of the progress of the request. The App is now free to handle additional requests, either from the
original surfer, to whom it can reply with status updates, or from other surfers, in which case it can
spawn off additional threads to handle their queries as necessary. When the worker thread finishes
processing, its results are made available to the App's main thread, and the worker thread is
terminated.  The App is then free to pass the results on to the surfer.<br />
<CENTER><h2>Asynchronous Processing</h2>
<IMAGE SRC="(~mcImagedir~)async_app.gif" HEIGHT=564 WIDTH=704 alt="asynchronous schematic" />
</CENTER>
<p>The Async model is versatile.  You can enable the surfer to abort the request if necessary. </p>
<p>Next page: (~JUMP|Demo1Home|Try Demo/1~)</p>
</div>  <!--- demopagecontent -->
(~drPageEnd~)

</body></html>
</whpage>

</whteko>
