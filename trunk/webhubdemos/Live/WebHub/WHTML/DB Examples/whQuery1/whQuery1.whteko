<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE whteko PUBLIC "http://static.webhub.com/dtd/0214/whteko.dtd">
<whteko defaultlingvo="eng" designmode="code">

<whdroplet name="drDemoSpeedbarForHTQ1">
(~GO|History|title="Find out how this demo was created"|History~)
</whdroplet>

<whmacros>
mcNameType=L-Language,LA-Language Alternate,D-Dialect,DA-Dialect Alternate,LP-Language Pejorative Alternate,DP-Dialect Pejorative Alternate
</whmacros>

<whpage pageid="pgEnterHTQ1" desc="Query Demo">
<whprep>
(~NOTASSIGNED|langID|(~SET|langID=eng~)~)
(~WebDataSource1.Close|~)<!--- this forces query to re-run -->
</whprep>
<whoutput>
(~mcdoctypehtml~)
<html>
<head>
	(~drHead~)
	<style type="text/css">
	#searchCriteria {
		width:80%; 
		vertical-align:top;
		border: 0;
		padding: 0;
	}
	#searchCriteria td.empty{
		background-color: #FBB586;
		width:30%;
	}
	#searchCriteria td.prompt{
		background-color:#E6E6E6;
		text-align: center;
	}
	#searchCriteria td.datainput{
		background-color:#E6E6E6;
		text-align: left;
	}
	#searchCriteria td.empty2{
		background-color: #A8DA87;
	}
	</style>
</head>
<body>
(~drPageBegin~)
<div class="row"><div id="whdemopagecontent" class="small-18 columns">
<p>
This demo shows how to show the results of a simple query based
on two input fields.</p>
<p>The most common two-field query is for site login by username 
and password. However for privacy reasons, we are not publishing 
a customer table. Instead this example uses the public ISO 639 tables 
for country and language.</p>
<whdroplet name="chSearchCriteria" show="yes">
<form method="post" accept-charset="UTF-8" action="(~ACTION|Page2~)">
<table id="searchCriteria" cellspacing="0">
<tr>
	<td class="empty">&nbsp;</td>
	<td class="prompt">Enter 3 letter language code:</td>
	<td class="datainput">(~INPUTTEXT|LangID,3,3~)</td>
	<td class="empty">&nbsp;</td>
</tr>
<tr>
	<td class="empty2">&nbsp;</td>
	<td class="prompt">Type of Name:</td>
	<td class="datainput">(~INPUTSELECT|NameType,mcNameType,1,no~)</td>
	<td class="empty2">&nbsp;</td>
</tr>
<tr>
	<td class="empty2">&nbsp;</td>
	<td class="prompt">&nbsp;</td>
	<td class="prompt"><input type="submit" value="Submit Query" /></td>
	<td class="empty2">&nbsp;</td>
</table>
</form>
<p>
Enter any human language code such as "eng", "deu", "fra", "spa" to 
see where that type of language is spoken.
Or enter nonsense letters and numbers to see what happens with invalid input.
</p>
</whdroplet>
</div><!--- /whdemopagecontent --></div>
(~drPageEnd~)

</body></html>
</whoutput>
</whpage>


<whdroplet name="drStyleHTQ1Result">
<link rel="stylesheet" type="text/css" href="(~mcSiteRoot~)demos/c/whdemosWebDataGrid.css" />
<style type="text/css" media="screen">
#answergrid-table {
 clear: both;
 margin: 0;
 border: 1px solid #000;
 }

#answergrid-table td {
 padding: 3px;
 border-top: 1px solid #888;
 border-right: 1px solid #bbb;
 border-left: 1px solid #bbb;
 border-bottom: 1px solid #888;
 background-color: #fefeef;
 }

#answergrid-table th {
 background-color: #2C42CC; /*#301604;*/
 color: white;
 font-weight: 700;
 border-right: 1px solid #ccc;
 }

#answergrid-table th a{
 color: white;
 font-weight: 700;
 text-decoration: none;
 }

#answergrid-table td:first-child a:hover {
 color: #D00;
 }

a:hover {color: #CC6699;}

input, select{
 border: 1px solid;
 margin: 0 4px;}

.refresh {color:#0000aa;}

</style>
</whdroplet>

<whdroplet name="errMessage">
<b>You have selected an invalid LangID or one that is 
not used in that way.</b> <br />
Please try again.
</whdroplet>

<whpage pageid="Page2" desc="Result page">
(~mcdoctypehtml~)
<html>
<head>
	(~drHead~)
	(~drStyleHTQ1Result~)
</head>
<body>
(~drPageBegin~)
<div class="row"><div id="whdemopagecontent" class="small-18 columns">
<span class="changing">(~JUMPR|pgEnterHTQ1|Back~)</span>
<h2>Search Result</h2>
<h3>Language ID = (~LangID~)</h3>
<h3>Name Type = (~waFromList.Execute|mcNameType|-|(~NameType~)~)</h3>
(~ANCHOR|anchRecordCount~)
(~answergrid.execute~)
(~MATCH|(~RecordCount~)=0|(~errMessage~)||(~ANCHORMODIFY|anchRecordCount|<p>Number of matches: (~RecordCount~)</p>~)
~)
</div><!--- /whdemopagecontent --></div>
(~drPageEnd~)

</body></html>
</whpage>

<whpage pageid="History" desc="How this demo was created">
(~mcdoctypehtml~)
<html>
<head>
(~drHead~)
</head>
<body>
(~drPageBegin~)
<div class="row"><div id="whdemopagecontent" class="small-18 columns">

<h1>Steps taken to create the HTQ1 demo</h1>

<ol>
<li> We created a basic WebHub application as described in the User Manual,
complete with an INI file, WHTEKO file and a Delphi project.  </li>

<li> The INI file had to list several files in order to be able to use the shared
WebHub demo files.

<ul>
<li> The about-whQuery1.whteko file had to contain the standard pieces of information for a WebHub demo.</li>
<li> The whQuery1.whteko file had to contain the pages particular to this demo.  That meant, the entrance page prompting for MemberID and Password, and the result page (Page2) with error message handling.</li>

<li> The AppID had to be set to 'htq1' (lowercase - important) 
so that the application-level configuration file would be found.
Because this was a demo, this was done by calling a special routine from the DPR, which
configures a number of defaults and sets the AppID. </li>
</ul></li>

<li> For testing purposes, we made sure the Hub was running.  </li>

<li> We ran the application from the Delphi Integrated Development Environment ("IDE")
so that we could use the debugger.  Once the EXE was running, we checked the HTML > Pages panel
to make sure that our entrance and results pages were listed.</li>

<li> We tested using a web browser and requesting ...?htq1:pgWelcome. </li>

<li> We went back into the Delphi IDE. There, on a starter panel (which could have equally well
been a datamodule), we added a TQuery, a TDatasource, a TwhdbSource and a TwhdbGrid
component.  We named the WebDatagrid "answergrid."
We conntected the TwhdbGrid to the TwhdbSource, and the TwhdbSource to the TDatasource,
and the TDatasource to the TQuery.
</li>

<li> We added an Init procedure (called from the PDF) to set the database location using a function
in the shared whDemoInitialize.pas unit.  The Init procedure also calls RefreshWebActions
(which is required), and uses the SetCaptions2004 and SetButtonSpecs2004 routines to define
reasonable, stylable captions and button specifications for the grid.
</li>

<li> We defined the SQL property of the TQuery to be a SELECT statement, using params.
    All params start with : in Delphi.  Name them 'www' plus the
    NAME tag from your HTML input field.  e.g. wwwPWord for the PWORD
    field.
</li>

<li> We went to the Params property of the query and set the type of each
    parameter.  In this case, both were strings.  Note that default values are
    optional.</li>

<li> The grid opens the query when it gets called from our HTML.  The
    TwhdbSource takes care of managing multiple instances for
    multiple surfers, and for re-running the query when the form
    StringVars change.  (Feature added in WebHub version 0.850.)
</li>

<li> We set the following TwhdbGrid properties to control the user interface:
<pre>
    ButtonsWhere = below
    ShowRecno = true
    ShowRecJump = false
</pre>
</li>

</ol>
</div><!--- /whdemopagecontent --></div>
(~drPageEnd~)

</body></html>
</whpage>

</whteko>
