<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE whteko PUBLIC "http://static.webhub.com/dtd/0214/whteko.dtd">
<whteko defaultlingvo="eng" designmode="code">
<whmacros>
mcWhDemoOneLinerHTUN=Spam Aversion
mcWhDemoCreditIdeaHTUN=www.fantomaster.com
mcWhDemoCreditFirstDraftHTUN=Ann Lynnworth
mcWhDemoCreditGraphicsHTUN=n/a
mcWhDemoCreditCopyHTUN=n/a
mcWhDemoUpdatedHTUN=Oct-2010
mcWhDemoKeywordsHTUN=obfuscation of email addresses,spam prevention,numeric coding,soap
mcWhDemoLiteHTUN=No
</whmacros>

<whdroplet name="drDemoSetupHTUN">
<ol>
<li> Requires whStopSpam.exe</li>
<li> Requires AppID 'htun' defined and pointing to the appropriate application-level configuration file. </li>
<li> If you are looking at this demo to learn how to make SOAP servers and clients 
with Delphi, you may want to use SubVersion to download the source and look at the 
SOAP client which is in a folder under the whStopSpam demo itself.</li>
</ol>
</whdroplet>


<whtranslation key="~whDemoShortDescHTUN">
This demo shows the conversion of an email address 
from plain text to numeric equivalent.  The purpose is to generate 
mailto links which spiders might not put in spam databases, 
yet human readers can use easily. Secondarily, the feature is 
available over SOAP.
</whtranslation>

<whmacros>
mcSoapURLStart=(~Request.URLtoAuthority~)/(~Request.RawVMR~)/(~AppID~)
</whmacros>

<whtranslation key="~whDemoLongDescHTUN">
<p>Translating an email address to its numeric equivalent does not prevent 
all spiders from harvesting the address, it only acts as a deterrent.
A more serious approach to preventing harvesting is to use a graphical 
image containing the email address - and to completely avoid "mailto" links.
The ultimate solution is to use a contact form which is posted to a server-side 
web application which emails the information to the desired party.  When a contact form is used, there is zero chance of even a super-spider finding out the email address; but there is 
also zero convenience for a human reader who may just want to send a quick
free-form email.</p>

<p>Beginner WebHub developers should look at the (~JUMP|htem:pgWelcome|email demo~) for some 
ideas on setting up contact forms.  If you program in a system other than WebHub, 
be careful not to create a haven for spammers.  An insecure server-side mail daemon 
is much more problematic than getting onto a few spam lists.</p>

<p>Technical notes: There is one custom web action component named waSlowSpam in 
this application. See also: MAILTO macro, which as of WebHub v2.014 includes a parameter 
to let you automatically obfuscate the email address.</p>

<p>The waSlowSpam component's features may be utilized via SOAP.  (The whSlowSpam.exe is the SOAP Host application.  It runs as a service, but this is not a requirement.)
WebHub provides automatic documentation for all web action components that have SOAP enabled.  For easier testing, 
a list of the documentation URLs are provided below.  The second two links might not display anything in Google Chrome; use Firefox or Internet Explorer, or view-source within Chrome.</p>
<ul>
<li> <a href="(~mcSoapURLStart~)/">(~mcSoapURLStart~)</a> </li>
<li> <a href="(~mcSoapURLStart~)/html/waSlowSpam">(~mcSoapURLStart~)/html/waSlowSpam</a></li>
<li> <a href="(~mcSoapURLStart~)/wsdl/waSlowSpam">(~mcSoapURLStart~)/wsdl/waSlowSpam</a></li>
<li> <a href="(~mcSoapURLStart~)/inspection.wsil">(~mcSoapURLStart~)/inspection.wsil</a> </li>
</ul>
<p>Use the (~JUMP|viewfiles,(~AppID~)|Source~) link to view both Delphi and WHTEKO source for this web application.</p>
<hr />
</whtranslation>

</whteko>
