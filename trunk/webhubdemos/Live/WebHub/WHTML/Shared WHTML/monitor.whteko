<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE whteko PUBLIC "-//HREF//DTD whteko stage 2.14//Strict//EN//" "http://static.webhub.com/dtd/0214/whteko.dtd">
<whteko 
  designmode="code"
  notes="pages for monitoring the application health and details">

<whpage pageid="pgMonitor"  desc="use this page for site monitoring">
<whprep>
(~SESSION|Delete~)
</whprep>
(~mcdoctypehtml~)
<html>
<head>
  <meta name=viewport content="width=device-width, initial-scale=1">
  <title>(~PageDesc~)</title>
</head> 
<body>
<h2>Application Test</h2>
<p>(~AppID~) is running under (~version~) 
as at <span class="changing">(~CentralInfo.WebTimeGMT~)</span>. Your ip# is <span class="changing">(~Request.RemoteAddress~)</span>.
Your user agent is [<span class="changing" id="echouseragent" >(~Request.UserAgent~)</span>]. 
<span class="webrobotstatus">(~ISWEBROBOTREQUEST|You have been classified as a web robot.||You have not been classified as a web robot.~)</span>
</p>

<h2>Session Data Cleared</h2>
<p>Session data for session #
<span id="webhubsessionid">(~RawSessionNumber~) </span>
deleted.</p>
<form id="sessionform" method="post" action="(~ACTION|pgmonitor~)">
data: (~INPUTTEXT|data,30~)<br/>
<input type="submit" name="btnMonitor(~RawSessionNumber~)" value="(~RawSessionNumber~)" />
</form>

<h2>Enter Site</h2>
(~JUMP||home page for this demo~)

</body>
</html>
</whpage>

<whpage pageid="pgAjaxCheckVersion" desc="-Check WebHub Component Version within domain">
<whdoc for="pgAjaxCheckVersion">
This mini page can be called by Ajax *as long as* the calling page is 
on the same DOMAIN. This is a security rule enforced by the web browser.
</whdoc>
<p>(~version~)</p>
</whpage>

<whpage pageid="pgAjaxCheckCompiler" desc="-Check Compiler Version within domain">
<p>(~CentralInfo.PascalCompilerCode~)</p>
</whpage>

<whpage pageid="pgRemoteCheckVersion" desc="-Check WebHub Component Version from any domain">
<whdoc for="pgCheckVersion">
This mini page could be called by JavaScript / AJAX. A tag of some sort (span, p, etc.) must surround 
the content.
</whdoc>
<html><head>
<style type="text/css">
body {font-family:"Trebuchet MS"; margin: 0; padding: 0; }
p { margin: 0; padding: 0; }
</style>
</head>
<body>
<p>(~version~)</p>
</body></html>
</whpage>

<whpage pageid="pgRemoteCheckCompiler" desc="-Check Compiler Version from any domain">
<html><head>
<style type="text/css">
body {font-family:"Trebuchet MS"; margin: 0; padding: 0; }
p { margin: 0; padding: 0; }
</style>
</head>
<body>
<p>(~CentralInfo.PascalCompilerCode~)</p>
</body></html>
</whpage>

<whpage pageid="pgtestHubNotFound" desc="-Simulate HubNotFound">
<whpagesettings>
googlesitemap=exclude
</whpagesettings>
(~waSimulateBadNews.Execute|HubNotFound~)
</whpage>

<whpage pageid="pgtestappnotrunning" desc="-Simulate AppNotRunning">
<whpagesettings>
googlesitemap=exclude
</whpagesettings>
(~waSimulateBadNews.Execute|AppNotRunning~)
</whpage>

<whpage pageid="jsontestappnotrunning" desc="-Simulate AppNotRunning in JSON syntax">
<whpagesettings>
googlesitemap=exclude
</whpagesettings>
(~waSimulateBadNews.Execute|AppNotRunning~)
</whpage>

<whpage pageid="pgtestAppIDBusy" desc="-Simulate AppIDBusy">
<whpagesettings>
googlesitemap=exclude
</whpagesettings>
(~waSimulateBadNews.Execute|AppIDBusy~)
</whpage>

<whpage pageid="pgtestRequestTimeout" desc="-Simulate RequestTimeout">
<whpagesettings>
googlesitemap=exclude
</whpagesettings>
(~waSimulateBadNews.Execute|RequestTimeout~)
</whpage>

<whpage pageid="pgtestAppCoverPage" desc="-Simulate AppCoverPage">
<whpagesettings>
googlesitemap=exclude
</whpagesettings>
(~waSimulateBadNews.Execute|AppCoverPage~)
</whpage>

<whpage pageid="jsontestAppCoverPage" desc="-Simulate JSON AppCoverPage">
<whpagesettings>
googlesitemap=exclude
</whpagesettings>
(~waSimulateBadNews.Execute|AppCoverPage~)
</whpage>

<whpage pageid="jsontestAppIDBusy" desc="-Simulate JSON AppIDBusy">
<whpagesettings>
googlesitemap=exclude
</whpagesettings>
(~waSimulateBadNews.Execute|AppIDBusy~)
</whpage>

<whpage pageid="jsontestRequestTimeout" desc="-Simulate JSON RequestTimeout">
<whpagesettings>
googlesitemap=exclude
</whpagesettings>
(~waSimulateBadNews.Execute|RequestTimeout~)
</whpage>

<whpage pageid="pgTestSimulatedErrors" desc="-Simulating 403 Conditions">
<whoutput>
(~mcdoctypehtml~)
<html (~ANCHOR|anchHtmlTag~)>
<head>
(~drHead~)
  <link rel="canonical" href="http://lite.demos.href.com/demos:(~PageID~)" />
</head>
<body>
(~drPageBegin~)

<div class="row" data-equalizer="main">(~drMainContentLeftEdge~)<div id="whdemopagecontent" class="small-18 medium-12 columns" data-equalizer-watch="main">
<h1>(~PageDesc~)</h1>
<p>These links are for simulating an error condition.
All should give status 403 with a visible response as HTML, JSON, etc., 
depending on the PageID and configuration.</p>
<ul>

<li> (~JUMP|pgtestappcoverpage|AppCoverPage~) </li>
<li> (~JUMP|pgtestappnotrunning|AppNotRunning~) </li>
<li> (~JUMP|pgtestappidbusy|AppIDBusy~) </li>
<li> (~JUMP|pgtesthubnotfound|HubNotFound~) </li>
<li> (~JUMP|pgtestrequesttimeout|RequestTimeout~) </li>

<li> (~JUMP|jsontestappcoverpage|JSON AppCoverPage~) </li>
<li> (~JUMP|jsontestappidbusy|JSON AppIDBusy~) </li>
<li> (~JUMP|jsontestrequesttimeout|JSON RequestTimeout~) </li>
</ul>

</div><!--- /whdemopagecontent -->(~drMainContentRightEdge~)</div>
(~drPageEnd~)</body></html>
</whoutput>
</whpage>

</whteko>