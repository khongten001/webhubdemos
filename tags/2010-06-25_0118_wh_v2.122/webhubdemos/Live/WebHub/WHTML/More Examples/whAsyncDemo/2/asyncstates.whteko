<whteko defaultlingvo="eng" designmode="code">

<whdoc>
Started,Aborted,Busy,Prior,Finished,Failed,None -- are the async states.

here are the chunks/macros implementing the default responses for
each state. the macros are sent by the demo application from 
TwhAsyncAction.OnExecute
</whdoc>


<!---give notice that a thread has just started-->
<whdroplet name="AsyncStarted">
(~SET|AsyncPages=0~)
(~MATCH|(~Request.RequestMethod~)~POST
|(~BOUNCE|(~DynURL.LocSMU~)(~DynURL.ToSessionIDW~)XXX~)
||(~AsyncTitle~)(~AsyncRefresh~)
~)
</whdroplet>

<!---give notice that a thread has just aborted-->
<whdroplet name="AsyncAborted">
(~MATCH|(~Request.RequestMethod~)~POST
|(~BOUNCE|(~LocSMU~)(~DynURL.ToSessionIDW~)YYY~)
||(~AsyncTitle~) (~dyn1~)% Completed before Task was aborted.
~)
</whdroplet>


<!---deal with giving notice that a job has just finished
(subsequent looks at this activity object will return its state as 'prior') -->
<whdroplet name="AsyncFinished">
(~AsyncTitle~)<br />
(~dyn1~)
(~IF|AsUnHook|<br />&nbsp;
||(~SET|dyn1=100~)(~AsyncProgress~)~)
</whdroplet>

<!---deal with the remaining 5 async conditions. -->

<whdroplet name="AsyncPrior">
(~AsyncTitle~)
<br />(~dyn1~)
<br />&nbsp;
</whdroplet>

<whdroplet name="AsyncFailed">
(~AsyncTitle~)
(~dyn1~)
<br />(~AsyncErrors~)
<br />(~dyn2~)
</whdroplet>

<whdroplet name="AsyncBusy">
(~AsyncTitle~)
(~dyn1~)% done.
(~AsyncProgress~)
(~AsyncRefresh~)
</whdroplet>

<whdroplet name="AsyncNone">
(~CLEAR|AsyncPages~)
(~AsyncTitle~)
</whdroplet>

</whteko>